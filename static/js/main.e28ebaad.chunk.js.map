{"version":3,"sources":["serviceWorker.js","search-component.js","dialog.js","index.js"],"names":["Boolean","window","location","hostname","match","Search","_this","this","react_default","a","createElement","InputGroup","className","FormControl","placeholder","aria-label","aria-describedby","value","props","searchValue","onChange","e","searchValueOnChange","React","Component","Popup","text","onClick","closePopup","Covid","_React$Component","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleSearchValueOnChange","bind","assertThisInitialized","setKey","state","covidData","displayedData","indiaData","displayedIndiaData","deathCount","recoverCount","activeKey","showPopup","inherits","createClass","key","setState","_this2","tableData","forEach","data","casesToday","concat","cases","todayCases","deathsToday","deaths","todayDeaths","isEmpty","country","push","Alert","variant","togglePopup","dialog_Popup","recovered","Spinner","as","animation","size","role","aria-hidden","confirmedCasesIndian","confirmedCasesForeign","loc","discharged","Table","hover","responsive","getTableBodyForIndia","getTableBody","Accordion","Card","Toggle","Header","eventKey","Collapse","Body","regionValue","filter","get","toLowerCase","indexOf","target","newStateValue","getDisplayedData","length","alert","k","_this3","getHeader","search_component_Search","Tabs","id","onSelect","Tab","title","getTable","getSpinner","getTableForIndia","_this4","document","fetch","then","results","json","console","log","obj","totalCountObj","active","critical","splice","index","unshift","ReactDOM","render","src_Covid","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e28ebaad.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\n\r\nexport default class Search extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <InputGroup className=\"mb-3\">\r\n    <FormControl\r\n      placeholder=\"Search for a region..\"\r\n      aria-label=\"Region\"\r\n      aria-describedby=\"basic-addon2\"\r\n      value={this.props.searchValue}\r\n      onChange={e => this.props.searchValueOnChange(e)}\r\n    />\r\n  </InputGroup>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\n\r\nexport default class Popup extends React.Component {\r\n    render() {\r\n      return (\r\n        <div className='popup'>\r\n          <div className='popup_inner'>\r\n            <h1>{this.props.text}</h1>\r\n          <button onClick={this.props.closePopup}>Close me</button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  ","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport  get  from 'lodash/get';\r\nimport  filter  from 'lodash/filter';\r\nimport forEach from 'lodash/forEach';\r\nimport  isEmpty  from 'lodash/isEmpty';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { KeyObject } from 'crypto';\r\nimport Search from './search-component';\r\nimport Popup from './dialog';\r\n\r\nexport class Covid extends React.Component {\r\n  constructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.handleSearchValueOnChange = this.handleSearchValueOnChange.bind(this);\r\n\t\tthis.setKey = this.setKey.bind(this);\r\n    this.state = {\r\n\t\t\tcovidData: {},\r\n\t\t\tdisplayedData: {},\r\n\t\t\tindiaData: {},\r\n\t\t\tdisplayedIndiaData: {},\r\n\t\t\tsearchValue: \"\",\r\n\t\t\tdeathCount: \"\",\r\n\t\t\trecoverCount: \"\",\r\n\t\t\tactiveKey: \"world\",\r\n\t\t\tshowPopup: false\r\n    };\r\n\t}\r\n\r\n\ttogglePopup() {\r\n\t\tthis.setState({\r\n\t\t  showPopup: !this.state.showPopup\r\n\t\t});\r\n\t}\r\n\r\n\tgetTableBody() {\r\n\t\tlet tableData = [];\r\n\t\tforEach(this.state.displayedData, (data, key) => {\r\n\t\t\tconst casesToday = `${data.cases} | ${data.todayCases}`;\r\n\t\t\tconst deathsToday = `${data.deaths} | ${data.todayDeaths}`;\r\n\t\t\tif (!isEmpty(data.country) && data.country !== \"World\") {\r\n\t\t\ttableData.push(\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<Alert variant=\"primary\" onClick={this.togglePopup.bind(this)}>\r\n\t\t\t\t\t\t\t\t{data.country}\r\n\t\t\t\t\t\t\t{this.state.showPopup ? \r\n\t\t\t\t\t\t\t\t<Popup\r\n\t\t\t\t\t\t\t\ttext='Happy Birthday Ishani!'\r\n\t\t\t\t\t\t\t\tclosePopup={this.togglePopup.bind(this)}>\r\n\t\t\t\t\t\t\t\t</Popup>\r\n\t\t\t\t\t\t\t\t: null\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</Alert>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t</td>\r\n\r\n\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t<Alert variant=\"primary\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t{casesToday}\r\n\t\t\t\t\t\t\t\t</Alert>\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t<Alert variant=\"success\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t{data.recovered}\r\n\t\t\t\t\t\t\t\t</Alert>\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t<Alert variant=\"danger\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t{deathsToday}\r\n\t\t\t\t\t\t\t\t</Alert>\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\r\n\t\t\t\t\t);\r\n\t\t\t}\r\n\t});\r\n\t\treturn tableData;\r\n\t}\r\n\r\n\tgetSpinner() {\r\n\t\tif (isEmpty(this.state.covidData)) {\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t\t<Spinner\r\n\t\t\t\t\t\tas=\"span\"\r\n\t\t\t\t\t\tanimation=\"grow\"\r\n\t\t\t\t\t\tsize=\"md\"\r\n\t\t\t\t\t\trole=\"status\"\r\n\t\t\t\t\t\taria-hidden=\"true\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t\tLoading...\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tgetTableBodyForIndia() {\r\n\t\tlet tableData = [];\r\n\t\tforEach(this.state.displayedIndiaData, (data, key) => {\r\n\t\t\tconst casesToday = `${data.confirmedCasesIndian} | ${data.confirmedCasesForeign}`;\r\n\t\t\tconst deathsToday = `${data.deaths}`;\r\n\t\t\ttableData.push(\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<Alert variant=\"primary\">\r\n\t\t\t\t\t\t\t\t\t\t{data.loc}\r\n\t\t\t\t\t\t</Alert>\r\n\t\t\t\t\t</td>\r\n\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<Alert variant=\"primary\">\r\n\t\t\t\t\t\t\t\t\t\t{casesToday}\r\n\t\t\t\t\t\t</Alert>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<Alert variant=\"success\">\r\n\t\t\t\t\t\t\t\t\t\t{data.discharged}\r\n\t\t\t\t\t\t</Alert>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<Alert variant=\"danger\">\r\n\t\t\t\t\t\t\t\t\t\t{deathsToday}\r\n\t\t\t\t\t\t</Alert>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t);\r\n\t});\r\n\t\treturn tableData;\r\n\t}\r\n\r\n\tgetTableForIndia() {\r\n\t\treturn (\r\n\t\t\t<Table\r\n\t\t\thover\r\n\t\t\tvariant=\"dark\"\r\n\t\t\tresponsive\r\n\t\t\tsize=\"sm\">\r\n\t\t\t <thead>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<th>\r\n\t\t\t\t\tState\r\n\t\t\t\t\t</th>\r\n\t\t\t\t\t<th>Cases (Indians | Foreigners)</th>\r\n\t\t\t\t\t<th>Recovered</th>\r\n\t\t\t\t\t<th>Deaths</th>\r\n\t\t\t\t</tr>\r\n\t\t\t </thead>\r\n\t\t\t <tbody>\r\n\t\t\t\t {this.getTableBodyForIndia()}\r\n\t\t\t </tbody>\r\n\t\t\t</Table>\r\n\t\t);\r\n\t}\r\n\r\n\tgetTable() {\r\n\t\treturn (\r\n\t\t\t<Table\r\n\t\t\thover\r\n\t\t\tvariant=\"dark\"\r\n\t\t\tresponsive\r\n\t\t\tsize=\"sm\">\r\n\t\t\t <thead>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<th>Country\r\n\t\t\t\t\t</th>\r\n\t\t\t\t\t<th>Cases (Total | Today)</th>\r\n\t\t\t\t\t<th>Recovered</th>\r\n\t\t\t\t\t<th>Deaths (Total | Today)</th>\r\n\t\t\t\t</tr>\r\n\t\t\t </thead>\r\n\t\t\t <tbody>\r\n\t\t\t\t {this.getTableBody()}\r\n\t\t\t </tbody>\r\n\t\t\t</Table>\r\n\t\t);\r\n\t}\r\n\r\n\tgetHeader() {\r\n\t\treturn(\r\n\t\t\t<div className=\"covid__full-data-body\">\r\n\t\t\t\t<Accordion>\r\n  <Card>\r\n    <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n      Global Coronavirus Information\r\n    </Accordion.Toggle>\r\n    <Accordion.Collapse eventKey=\"0\">\r\n\t\t\t<Card.Body>\r\n\t\t\t\tThe data is updated every 24 hours and has been taken from official WHO statistics\r\n\t\t\t\t<hr />\r\n\t\t\t\tStay Home. Stay Safe\r\n\t\t\t</Card.Body>\r\n    </Accordion.Collapse>\r\n  </Card>\r\n</Accordion>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\tgetDisplayedData(searchValue) {\r\n\t\tlet covidData = this.state.covidData;\r\n\t\tlet regionValue = \"country\";\r\n\t\tif (this.state.activeKey === \"india\") {\r\n\t\t\t\tcovidData = this.state.indiaData;\r\n\t\t\t\tregionValue = \"loc\";\r\n\t\t}\r\n\t\tconst displayedData = filter(covidData, (data, key) => {\r\n\t\t\tconst region = get(data, regionValue, '').toLowerCase();\r\n\t\t\treturn region.indexOf(searchValue.toLowerCase()) === 0;\r\n\t\t});\r\n\t\treturn displayedData;\r\n\t}\r\n\r\n\thandleSearchValueOnChange(e) {\r\n\t\tconst searchValue = e.target.value;\r\n\t\tlet newStateValue = {};\r\n\t\tnewStateValue.searchValue = searchValue;\r\n\t\tif (this.state.activeKey === \"world\") {\r\n\t\t\t\tlet displayedData = this.getDisplayedData(searchValue);\r\n\t\t\t\r\n\t\t\t\tif(displayedData.length === 0) {\r\n\t\t\t\t\tnewStateValue.displayedData = this.state.covidData;\r\n\t\t\t\t\tnewStateValue.searchValue = \"\";\r\n\t\t\t\t\talert('Invalid search');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnewStateValue.displayedData = displayedData;\r\n\t\t\t\t}\r\n\t\t} else {\r\n\t\t\tlet displayedIndiaData = this.getDisplayedData(searchValue);\r\n\t\t\tif(displayedIndiaData.length === 0) {\r\n\t\t\t\tnewStateValue.displayedIndiaData = this.state.indiaData;\r\n\t\t\t\tnewStateValue.searchValue = \"\";\r\n\t\t\t\talert('Invalid search');\r\n\t\t\t} else {\r\n\t\t\t\tnewStateValue.displayedIndiaData = displayedIndiaData;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.setState(newStateValue);\r\n\t}\r\n\r\n\tsetKey(k) {\r\n\t\tthis.setState({\r\n\t\t\tactiveKey: k,\r\n\t\t\tsearchValue: \"\",\r\n\t\t\tdisplayedData: this.state.covidData,\r\n\t\t\tdisplayedIndiaData: this.state.indiaData\r\n\t\t});\r\n\t}\r\n\r\n  render(){\r\n\r\n\t\t/*let options = [];\r\n\t\tif (!isEmpty(covid)) {\r\n\t\t\tforEach(covid, (data, value) => {\r\n\t\t\t\t\tconsole.log(data, value);\r\n\t\t\t\t\tconsole.log(\"jell\");\r\n\t\t\t});\r\n\t\t}*/\r\n\r\n\t  return (\r\n\t\t\t<div className=\"covid__body\">\r\n\t\t\t\t{this.getHeader()}\r\n\t\t\t\t<div className=\"covid__search-component\">\r\n\t\t\t\t\t<Search\r\n\t\t\t\t\t\tsearchValue={this.state.searchValue}\r\n\t\t\t\t\t\tsearchValueOnChange={this.handleSearchValueOnChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Tabs\r\n\t\t\t\t\tid=\"controlled-tab-example\"\r\n\t\t\t\t\tactiveKey={this.state.activeKey}\r\n\t\t\t\t\tonSelect={(k) => this.setKey(k)}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Tab eventKey=\"world\" title=\"World\">\r\n\t\t\t\t\t<div className = \"covid__table\">\r\n\t\t\t\t\t\t{this.getTable()}\r\n\t\t\t\t\t\t{this.getSpinner()}\r\n\t\t\t\t</div>\r\n\t\t\t\t\t</Tab>\r\n\t\t\t\t\t<Tab eventKey=\"india\" title=\"India\">\r\n\t\t\t\t\t<div className = \"covid__table\">\r\n\t\t\t\t\t\t{this.getTableForIndia()}\r\n\t\t\t\t\t\t{this.getSpinner()}\r\n\t\t\t\t</div>\r\n\t\t\t\t\t</Tab>\r\n\t\t\t\t</Tabs>\r\n\t\t\t</div>\r\n    );\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\tdocument.title = \"Covid Update\";\r\n\r\n\t\t// https://api.covid19india.org/state_district_wise.json\r\n\t\t// https://api.covid19india.org/data.json\r\n\t\t// https://api.rootnet.in/covid19-in/stats/latest\r\n\t\t// https://api.rootnet.in/covid19-in/stats/daily\r\n\r\n\t\tfetch('https://api.rootnet.in/covid19-in/stats/daily')\r\n\t\t.then(results => {\r\n\t\t\t\treturn results.json();\r\n\t\t}).then(data => {\r\n\t\t\t\tconsole.log(data);\r\n\t\t\t\tconst indiaData = get(data, 'data', []);\r\n\t\t\t\tconst obj = get(indiaData[indiaData.length - 1], 'regional', {});\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tindiaData: obj,\r\n\t\t\t\t\tdisplayedIndiaData: obj\r\n\t\t\t\t});\r\n\t\t});\r\n\r\n\t\tfetch('https://coronavirus-19-api.herokuapp.com/countries')\r\n\t\t.then(results => {\r\n\t\t\t\treturn results.json();\r\n\t\t}).then(data => {\r\n\t\t\tlet totalCountObj = {\r\n\t\t\t\tcountry: 'All Countries',\r\n\t\t\t\tcases: 0,\r\n\t\t\t\ttodayCases: 0,\r\n\t\t\t\tdeaths: 0,\r\n\t\t\t\ttodayDeaths: 0,\r\n\t\t\t\trecovered: 0,\r\n\t\t\t\tactive: 0,\r\n\t\t\t\tcritical: 0\r\n\t\t\t};\r\n\t\t\tlet processData = function(){\r\n\t\t\tdata.splice(0, 8);\r\n\t\t\tdata.forEach(function(obj, index){\r\n\t\t\t\t\t\ttotalCountObj.cases += obj.cases;\r\n\t\t\t\t\t\ttotalCountObj.todayCases += obj.todayCases;\r\n\t\t\t\t\t\ttotalCountObj.deaths += obj.deaths;\r\n\t\t\t\t\t\ttotalCountObj.todayDeaths += obj.todayDeaths;\r\n\t\t\t\t\t\ttotalCountObj.recovered += obj.recovered;\r\n\t\t\t\t\t\ttotalCountObj.active += obj.active;\r\n\t\t\t\t\t\ttotalCountObj.critical += obj.critical;\r\n\t\t\t\t\t\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t\tdata.unshift(totalCountObj);\r\n\t\t\t}\r\n\t\t\tprocessData();\r\n\t\t\tthis.setState({\r\n\t\t\t\tcovidData: data,\r\n\t\t\t\tdisplayedData: data\r\n\t\t\t});\r\n\t\t});\r\n  }\r\n}\r\n\r\nReactDOM.render(\r\n  <Covid />,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}